alias: Inovelli Dimmer and Switch LEDs ZwaveJS
description: 'Handles setting the LED colors and notifications on Inovelli "Red" model switches and dimmers through the Zwave JS integration with zwavejs2mqtt 2.4.0 using webhooks.'
############
# Caculations: https://docs.google.com/spreadsheets/d/14wTP4OL4hkDK3Et5kYL4fyxPIK_R9JR3cgFxSa6dhyw/edit?usp=sharing
#   Note that the on/off LZW30-SN switch has 1 fewer effect, which makes its math slightly different than the dimmers or other devices with a full LED bar.
#
# If LED indicator parameters have been passed, we'll set those before setting the effect. Once the effect clears or the device is used, the indicater will then display the new settings.
#   This also allows a user to pass just a color or brightness change (perhaps at night).
#
# Required for setting the LED indicator
#   LEDcolor: (int or string) Sets color of LED status and must be one of: Off, Red, Orange, Yellow, Green, Cyan, Teal, Blue, Purple, Light Pink, Pink, White
#   LEDbrightness: (whole integer 1 – 10) Sets the brightness of the LED status when on.
#   LEDbrightness_off: (whole integer 1 – 10) Sets the brightness of the LED status when off.
#
# Required for setting LED effects
#   duration: (string or whole integer of seconds) Either "Off", an integer of seconds, or a whole integer followed by "Second", "Seconds", "Minute", or "Minutes", "Hour", "Hours", "Indefinitely", or "Forever".
#   effect: (string) One of: "Off", "Solid", "Chase" (not available on switches), "Fast Blink", "Slow Blink", "Blink", or "Pulse".
#   brightness: (integer 1 – 10) Sets the brightness of the LED's effect
#   color: (string) Sets color of LED effect and must be one of: Off, Red, Orange, Yellow, Green, Cyan, Teal, Blue, Purple, Light Pink, Pink, White
############
mode: parallel
max: 100 # Default max is 10, which might be an issue if you have a lot of switches

fields:
  area:
    name: Area
    description: Areas contaiting Inovelli devices.
    required: no
    #example:
    selector:
      area:
        multiple: true
        device: 
          manufacturer: Inovelli
          integration: zwave_js
          #model: LZW36, LZW30-SN, LZW31-SN 

  device: 
    name: Device
    description: Inovelli LZW36, LZW30-SN, LZW31-SN device IDs.  Mix and match as you like
    required: no
    #example: 
    selector:
      device: 
        multiple: true
        manufacturer: Inovelli  
        integration: zwave_js
        #model: LZW36, LZW30-SN, LZW31-SN 

  entity:
    name: Entity
    description: The light.*, switch.*, or fan.* entity for the LED we're setting.  Can be a comma separated list. Mix and match as you like.
    required: no
    example: light.office, fan.guest_room
    selector:
      entity:
        multiple: true
        integration: zwave_js 
        domain: 
          - fan 
          - light
          - switch

  LEDcolor:
    name: LED Color (non-effect)
    description: Sets the color of the LED indicator brightness levels
    required: no
    example: Blue
    selector:
      select:
        options:
          - "Off"
          - Red
          - Orange
          - Yellow
          - Green
          - Cyan
          - Teal
          - Blue
          - Purple
          - Light Pink
          - Pink
          - Hot Pink
          - White

  LEDbrightness: 
    name: LED Brightness On (non-effect)
    description: Sets the brightness of the LED status when on. 0 means off
    required: no
    example: 6
    selector:
      number: 
        min: 0
        max: 10
        step: 1
        mode: slider

  LEDbrightness_off:
    name: LED Brightness Off (non-effect)
    description: Sets the brightness of the LED status when off. 0 means off
    required: no
    example: 2
    selector:
      number: 
        min: 0
        max: 10
        step: 1
        mode: slider

  duration: 
    name: Duration of Effect
    description: How long the effect will last.
    required: no
    example: Off
    selector:
      select:
        options:
          - "Off"
          - Forever
          - 1 Second
          - 2 Seconds
          - 3 Seconds
          - 4 Seconds
          - 5 Seconds
          - 6 Seconds
          - 7 Seconds
          - 8 Seconds
          - 9 Seconds
          - 10 Seconds
          - 15 Seconds
          - 20 Seconds
          - 25 Seconds
          - 30 Seconds
          - 35 Seconds
          - 40 Seconds
          - 45 Seconds
          - 50 Seconds
          - 55 Seconds
          - 60 Seconds
          - 2 Minutes
          - 3 Minutes
          - 4 Minutes
          - 5 Minutes
          - 6 Minutes
          - 7 Minutes
          - 8 Minutes
          - 9 Minutes
          - 10 Minutes
          - 15 Minutes
          - 30 Minutes
          - 45 Minutes
          - 1 Hour
          - 2 Hours

  effect: 
    name: Effect
    description: Type of effect. NOTE – Chase is not available on devices of type switch.
    required: no
    example: Pulse
    selector:
      select:
        options:
          - "Off"
          - Solid
          - Chase
          - Fast Blink
          - Slow Blink
          - Blink
          - Pulse

  brightness: 
    name: Effect Brightness Sets the brightness of the LED's effect.  0 means off
    description: How bright the LED effect will be
    required: no
    example: 8
    selector:
      number:
        min: 0
        max: 10
        step: 1
        mode: slider

  color: 
    name: Effect Color
    description: Color of LED effect
    required: no
    example: Red
    selector:
      select:
        options:
          - "Off"
          - Red
          - Orange
          - Yellow
          - Green
          - Cyan
          - Teal
          - Blue
          - Purple
          - Light Pink
          - Pink
          - Hot Pink
          - White


variables:
##################
# Look-up tables for easy reference and future maintenance. 
##################
  color_set: 
    "off": 0
    "red": 0
    "orange": 8
    "yellow": 42
    "green": 85
    "cyan": 127
    "teal": 145
    "blue": 170
    "purple": 195
    "light pink": 220
    "pink": 234
    "hot pink": 234
    "white": 255

  duration_values: 
    "off": 0
    "1 second": 1
    "1 seconds": 1
    "2 seconds": 2
    "3 seconds": 3
    "4 seconds": 4
    "5 seconds": 5
    "6 seconds": 6
    "7 seconds": 7
    "8 seconds": 8
    "9 seconds": 9
    "10 seconds": 10
    "15 seconds": 15
    "20 seconds": 20
    "25 seconds": 25
    "30 seconds": 30
    "35 seconds": 35
    "40 seconds": 40
    "45 seconds": 45
    "50 seconds": 50
    "55 seconds": 55
    "60 seconds": 60
    "1 minute": 60
    "1 minutes": 60
    "2 minutes": 62
    "3 minutes": 63
    "4 minutes": 64
    "10 minutes": 70
    "15 minutes": 75
    "30 minutes": 90
    "45 minutes": 105
    "60 minutes": 120
    "1 hour": 120
    "2 hours": 122
    "forever": 255
    "indefinitely": 255

  switch_effects:
    "off": 0
    "solid": 1
    "fast blink": 2
    "chase": 2
    "slow blink": 3
    "blink": 3
    "pulse": 4

  strip_effects:
    "off": 0
    "solid": 1
    "chase": 2
    "fast blink": 3
    "slow blink": 4
    "blink": 4
    "pulse": 5

##################
# There's a lot of redundancy here, but it should be easy to update if parameter names change for one model and not another
##################
  parameters:
    "dimmer_effect_bulk": 16
    "dimmer_effect_color": "LED Indicator: Effect Color"
    "dimmer_effect_brightness": "LED Indicator: Effect Brightness"
    "dimmer_effect_duration": "LED Indicator: Effect Duration"
    "dimmer_effect_effect": "LED Indicator: Effect Type"
    "dimmer_ledcolor": "LED Indicator: Color"
    "dimmer_ledbrightness": "LED Indicator: Brightness When On"
    "dimmer_ledbrightness_off": "LED Indicator: Brightness When Off"

    "switch_effect_bulk": 8
    "switch_effect_color": "LED Effect Color"
    "switch_effect_brightness": "LED Effect Brightness"
    "switch_effect_duration": "LED Effect Duration"
    "switch_effect_effect": "LED Effect Type"
    "switch_ledcolor": "LED Indicator Color"
    "switch_ledbrightness": "LED Indicator Brightness"
    "switch_ledbrightness_off": "LED Indicator Brightness When Off"

    "combo_light_effect_bulk": 24
    "combo_light_effect_color": "Light LED Effect Color"
    "combo_light_effect_brightness": "Light LED Effect Brightness"
    "combo_light_effect_duration": "Light LED Effect Duration"
    "combo_light_effect_effect": "Light LED Effect Type"
    "combo_light_ledcolor": "Light LED Indicator Color"
    "combo_light_ledbrightness": "Light LED Strip Brightness"
    "combo_light_ledbrightness_off": "Light LED Strip Brightness When Off"

    "combo_fan_effect_bulk": 25
    "combo_fan_effect_color": "Fan LED Effect Color"
    "combo_fan_effect_brightness": "Fan LED Effect Brightness"
    "combo_fan_effect_duration": "Fan LED Effect Duration"
    "combo_fan_effect_effect": "Fan LED Effect Type"
    "combo_fan_ledcolor": "Fan LED Indicator Color"
    "combo_fan_ledbrightness": "Fan LED Strip Brightness"
    "combo_fan_ledbrightness_off": "Fan LED Strip Brightness When Off"

sequence:

##################
# Cleaning up inputs; using lower case since it's able to handle capitol letters in the middle of mistyped and camelcase words like "LightPink".
# Brightness variables are set to 0 so they're skipped in the logic.  To turn the LED off, use "Off".
##################
  - variables:
      area: '{{ area|default("invalid")|lower }}'
      device: '{{ device|default("invalid")|lower }}'
      entity: > #Maintaining compatibily with automations written for the older script.
        {% set entlist = namespace(entities=[]) %}
        {% if entity is defined and ',' in entity %} 
          {% set entnum = entity.split( '.' ) |count -1 %}
          {% for i in range(0,entnum) %}
            {% set entlist.entities = entlist.entities + [entity.split( ',' )[i]|string|replace( ' ', '' ) ] %}
            {% set next = i-1 %}
          {% endfor %}
        {% elif entity is defined and entity[0]|count == 1 %}
            {% set entlist.entities = [entity|string|replace( ' ', '' )] %}
        {% elif entity is defined and entity[0]|count > 1 %}
          {% set entlist.entities = entity %}
        {% endif %}
        {{ entlist.entities|lower }} 
      area_dimmer: >
        {% set entities = namespace(areas=[]) %}
        {% for dev in area %}
          {% for ent in area_entities(dev) %}
            {% if device_attr(device_id(ent),'model') == 'LZW31-SN' and ent.split('.')[0] == 'light' %}
              {% set entities.areas = entities.areas + [ent | string] %}
            {% endif %}
          {% endfor %}
        {% endfor %}
        {{ entities.areas|lower }}
      device_dimmer: >
        {% set entities = namespace(devices=[]) %}
        {% for dev in device %}
          {% for ent in device_entities(dev) %}
            {% if device_attr(device_id(ent),'model') == 'LZW31-SN' and ent.split('.')[0] == 'light' %}
              {% set entities.devices = entities.devices + [ ent | string] %}
            {% endif %}
          {% endfor %}
        {% endfor %}
        {{ entities.devices|lower }}
      entity_dimmer: >
        {% set entities = namespace(entities=[]) %}
        {% for ent in entity %}
          {% if device_attr(ent,'model') == 'LZW31-SN' and ent.split('.')[0] == 'light' %}
            {% set entities.entities = entities.entities + [ ent | string] %}
          {% endif %}
        {% endfor %}
        {{ entities.entities|lower }}
      area_switch: >
        {% set entities = namespace(areas=[]) %}
        {% for dev in area %}
          {% for ent in area_entities(dev) %}
            {% if device_attr(device_id(ent),'model') == 'LZW30-SN' and ent.split('.')[0] == 'switch' %}
              {% set entities.areas = entities.areas + [ent | string] %}
            {% endif %}
          {% endfor %}
        {% endfor %}
        {{ entities.areas|lower }}
      device_switch: >
        {% set entities = namespace(devices=[]) %}
        {% for dev in device %}
          {% for ent in device_entities(dev) %}
            {% if device_attr(device_id(ent),'model') == 'LZW30-SN' and ent.split('.')[0] == 'switch' %}
              {% set entities.devices = entities.devices + [ ent | string] %}
            {% endif %}
          {% endfor %}
        {% endfor %}
        {{ entities.devices|lower }}
      entity_switch: >
        {% set entities = namespace(entities=[]) %}
        {% for ent in entity %}
          {% if device_attr(ent,'model') == 'LZW30-SN' and ent.split('.')[0] == 'switch' %}
            {% set entities.entities = entities.entities + [ ent | string] %}
          {% endif %}
        {% endfor %}
        {{ entities.entities|lower }}
      area_combo_light: >
        {% set entities = namespace(areas=[]) %}
        {% for dev in area %}
          {% for ent in area_entities(dev) %}
            {% if device_attr(device_id(ent),'model') == 'LZW36' and ent.split('.')[0] == 'light' %}
              {% set entities.areas = entities.areas + [ent | string] %}
            {% endif %}
          {% endfor %}
        {% endfor %}
        {{ entities.areas|lower }}
      device_combo_light: >
        {% set entities = namespace(devices=[]) %}
        {% for dev in device %}
          {% for ent in device_entities(dev) %}
            {% if device_attr(device_id(ent),'model') == 'LZW36' and ent.split('.')[0] == 'light' %}
              {% set entities.devices = entities.devices + [ ent | string] %}
            {% endif %}
          {% endfor %}
        {% endfor %}
        {{ entities.devices|lower }}
      entity_combo_light: >
        {% set entities = namespace(entities=[]) %}
        {% for ent in entity %}
          {% if device_attr(ent,'model') == 'LZW36' and ent.split('.')[0] == 'light' %}
            {% set entities.entities = entities.entities + [ ent | string] %}
          {% endif %}
        {% endfor %}
        {{ entities.entities|lower }}
      area_combo_fan: >
        {% set entities = namespace(areas=[]) %}
        {% for dev in area %}
          {% for ent in area_entities(dev) %}
            {% if device_attr(device_id(ent),'model') == 'LZW36' and ent.split('.')[0] == 'fan' %}
              {% set entities.areas = entities.areas + [ent | string] %}
            {% endif %}
          {% endfor %}
        {% endfor %}
        {{ entities.areas|lower }}
      device_combo_fan: >
        {% set entities = namespace(devices=[]) %}
        {% for dev in device %}
          {% for ent in device_entities(dev) %}
            {% if device_attr(device_id(ent),'model') == 'LZW36' and ent.split('.')[0] == 'fan' %} 
              {% set entities.devices = entities.devices + [ ent | string] %}
            {% endif %}
          {% endfor %}
        {% endfor %}
        {{ entities.devices|lower }}
      entity_combo_fan: >
        {% set entities = namespace(entities=[]) %}
        {% for ent in entity %}
          {% if device_attr(ent,'model') == 'LZW36' and ent.split('.')[0] == 'fan' %} 
            {% set entities.entities = entities.entities + [ ent | string] %}
          {% endif %}
        {% endfor %}
        {{ entities.entities|lower }}
      color: '{{ color|default("no change")|lower }}'
      duration: '{{ duration|default("invalid")|lower }}'
      brightness: '{{ brightness|default("11")|int }}'
      effect: '{{ effect|default("off")|lower }}'
      LEDcolor: '{{ LEDcolor|default("no change")|lower }}'
      LEDbrightness: '{{ LEDbrightness|default("11")|int }}'
      LEDbrightness_off: '{{ LEDbrightness_off|default("11")|int }}'

  - repeat:
      for_each:
        - device_type: dimmer
          entities: '{{ area_dimmer + device_dimmer + entity_dimmer }}'
        - device_type: switch
          entities: '{{ area_switch + device_switch + entity_switch }}'
        - device_type: combo_light
          entities: '{{ area_combo_light + device_combo_light + entity_combo_light }}'
        - device_type: combo_fan
          entities: '{{ area_combo_fan + device_combo_fan + entity_combo_fan }}'
      sequence:

 
##################
# Do not continue if we don't have at least one entity of this type
##################
        - condition: template
          value_template: |
            {{ repeat.item.entities |count >0 }}


##################
# LED strip color
##################
        - choose:
          - conditions: >
              {{ LEDcolor != "no change" }}
            sequence:
              - service: zwave_js.set_config_parameter
                data:
                  entity_id: '{{ repeat.item.entities }}'
                  parameter: |
                    {% set effect_param = repeat.item.device_type + '_ledcolor' %}
                    {{ parameters[effect_param] }}
                  value: |
                    {{ color_set[LEDcolor] }}

##################
# LED strip brightness
##################
        - choose:
          - conditions: >
              {{ LEDbrightness is defined and LEDbrightness != 11 }}
            sequence:
              - service: zwave_js.set_config_parameter
                data:
                  entity_id: '{{ repeat.item.entities }}'
                  parameter: |
                    {% set effect_param = repeat.item.device_type + '_ledbrightness' %}
                    {{ "off" if parameters[effect_param] == 0 else parameters[effect_param] }}
                  value: |
                    {{ LEDbrightness }}
 
##################
# LED strip brightness when off
##################
        - choose:
          - conditions: >
              {{ LEDbrightness_off is defined and LEDbrightness_off != 11 }}
            sequence:
              - service: zwave_js.set_config_parameter
                data:
                  entity_id: '{{ repeat.item.entities }}'
                  parameter: |
                    {% set effect_param = repeat.item.device_type + '_ledbrightness_off' %}
                    {{ "off" if parameters[effect_param] == 0 else parameters[effect_param] }}
                  value: |
                    {{ LEDbrightness_off }}
    
    
#################
# Effects (fully defined)
# Calling a bulk set of parameters reduces Z-Wave traffic and writes to the switch's NVRAM, extending its life(?)
##################
        - choose:
          - conditions: >
              {{ effect != "off" and
                 color != "no change" and 
                 duration != "invalid" and
                 brightness != 11 }}
            sequence:
              - service: zwave_js.bulk_set_partial_config_parameters
                data:
                  entity_id: '{{ repeat.item.entities }}'
                  parameter: |
                    {% set bulk_param = repeat.item.device_type + '_effect_bulk' %}
                    {{ parameters[bulk_param] }}
                  value: |
                    {% if repeat.item == "switch" %}
                      {{ color_set[color] + (brightness * 256) + (duration_values[duration] * 65536) + (switch_effects[effect] * 16777216) }}
                    {% else %}
                      {{ color_set[color] + (brightness * 256) + (duration_values[duration] * 65536) + (strip_effects[effect] * 16777216) }}
                    {% endif %}
      
#################
# Effects (not fully defined)
# We could change aspects of the effect without knowing everything (e.g. change the brightness but not color).
#   It turns out that changing the color or brightness resets the duration, so I question the value here unless the duration is "forever".
##################
#              - service: zwave_js.set_config_parameter
#                data:
#                  entity_id: '{{ repeat.item.entities }}'
#                  parameter: |
#                    {% set effect_param = repeat.item.device_type + '_effect_color' %}
#                    {{ parameters[effect_param] }}
#                  value: |
#                    {{ color_set[color] }}
#              - service: zwave_js.set_config_parameter
#                data:
#                  entity_id: '{{ repeat.item.entities }}'
#                  parameter: |
#                    {% set effect_param = repeat.item.device_type + '_effect_brightness' %}
#                    {{ "off" if parameters[effect_param] == 0 else parameters[effect_param] }}
#                  value: |
#                    {{ brightness }}
#              - service: zwave_js.set_config_parameter
#                data:
#                  entity_id: '{{ repeat.item.entities }}'
#                  parameter: |
#                    {% set effect_param = repeat.item.device_type + '_effect_duration' %}
#                    {{ parameters[effect_param] }}
#                  value: |
#                    {{ duration_values[duration] }}
#              - service: zwave_js.set_config_parameter
#                data:
#                  entity_id: '{{ repeat.item.entities }}'
#                  parameter: |
#                    {% set effect_param = repeat.item.device_type + '_effect_effect' %}
#                    {{ parameters[effect_param] }}
#                  value: |
#                    {% if repeat.item == "switch" %}
#                      {{ switch_effects[effect] }}
#                    {% else %}
#                      {{ strip_effects[effect] }}
#                    {% endif %}

##################
# Default will be to clear the effect and set the duration to 1 second.  
# Setting only the effect to "off" turned the LED off on LZW36 fan / light combos for the duration (which could be "forever").
#    This way it turns off for 1 sec before it returns to its default state, but until the min value for effect changes to 0 in the DB, that's the best I can do.
# This way, "forever" effects can be set, then easily cleared.
# It's also a safer way to fail since the worst case scenario is that an effect is cleared.
##################
          default: 
            - service: zwave_js.set_config_parameter
              data:
                entity_id: '{{ repeat.item.entities }}'
                parameter: |
                  {% set effect_param = repeat.item.device_type + '_effect_effect' %}
                  {{ parameters[effect_param] }}
                value: 0
            - service: zwave_js.set_config_parameter
              data:
                entity_id: '{{ repeat.item.entities }}'
                parameter: |
                  {% set effect_param = repeat.item.device_type + '_effect_duration' %}
                  {{ parameters[effect_param] }}
                value: 1
# The code below was unnecessary service calls.
#           - service: zwave_js.set_config_parameter
#             data:
#               entity_id: '{{ repeat.item.entities }}'
#               parameter: |
#                 {% set effect_param = repeat.item.device_type + '_effect_color' %}
#                 {{ parameters[effect_param] }}
#               value: 0
#            - service: zwave_js.set_config_parameter
#              data:
#                entity_id: '{{ repeat.item.entities }}'
#                parameter: |
#                  {% set effect_param = repeat.item.device_type + '_effect_brightness' %}
#                  {{ parameters[effect_param] }}
#                value: 0


##################
# This was used in the template editor for debugging, in case I need to play around with it for something else later.
##################
#{% set area = namespace(areas=[]) %}
#{% set area.areas = ['Family Room'] %}
#{% set entities = namespace(areas=[]) %}
#{% for dev in area.areas %}
#  {% for ent in area_entities(dev) %}
#    {% if device_attr(device_id(ent),'model') == 'LZW31-SN' and ent.split('.')[0] == 'light' %}
#      {% set entities.areas = entities.areas + [ent | string] %}
#    {% endif %}
#  {% endfor %}
#{% endfor %}
#area entities:
#{{ entities.areas }}
#
#{% set device = namespace(devices=[]) %}
#{% set device.devices = ['42a63bef36fb235f4cf301b01b325a35'] %}
#{% set entities = namespace(devices=[]) %}
#{% for dev in device.devices %}
#  {% for ent in device_entities(dev) %}
#    {% if device_attr(device_id(ent),'model') == 'LZW31-SN' and ent.split('.')[0] == 'light' %}
#      {% set entities.devices = entities.devices + [ ent | string] %}
#    {% endif %}
#  {% endfor %}
#{% endfor %}
#device entities:
#{{ entities.devices }}
#
#{% set entities = namespace(entities=[]) %}
#{% set entities.entities = ['light.office_lights_level'] %}
#{% for ent in entities.entities %}
#  {% if device_attr(ent,'model') == 'LZW31-SN' and ent.split('.')[0] == 'light' %}
#    {% set entities.entities = entities.entities + [ ent | string] %}
#  {% endif %}
#{% endfor %}
#entity entities:
#{{entities.entities}}
